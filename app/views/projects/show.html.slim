.container
  = render partial: "shared/breadcrumb", locals: {\
      text_link_hash: {\
        "Projects" => projects_path,
        @project.name => project_path(@project)\
      },
      class: "mt-4" }

  h1.mt-4
    = @project.name
    = " "
    = link_to_project_orgatnization(@project)
  - if @project.slack_entity.blank?
    .mt-4.mb-4
      = link_to omniauth_path("slack", project_id: @project.id), method: :post do
        img alt="Enable Slack notifications" height="40" width="139" src="https://platform.slack-edge.com/img/add_to_slack.png" srcset="https://platform.slack-edge.com/img/add_to_slack.png 1x, https://platform.slack-edge.com/img/add_to_slack@2x.png 2x"
  .d-flex.justify-content-between
    h3 Configurations
    .d-flex.align-items-center
      - if @project.integration_type == ProjectsConstants::Providers::GITHUB
        = link_to "Manage installation ðŸ”—", github_router.installation_page_url(@project.integration_id, @project_github_entity), target: :_blank, class: "btn btn-primary mr-1"
      = link_to "Add new configuration", new_configuration_url(@project), class: "btn btn-primary"

  .mt-4
    table.table.table-hover
      thead
        tr
          th.by-content #
          th Name
          th Status
          th
      tbody
        - @repositories.each_with_index do |repository, index|
          tr
            td.text-center = index + 1
            td
              - if repository.status == RepositoryConstants::REMOVED
                = repository.name
              - else
                = link_to edit_project_repository_path(@project, repository) do
                  = repository.name
            td = repository.status.humanize
            td
              - if repository.status.in? [RepositoryConstants::INSTALLED, RepositoryConstants::INACTIVE]
                = link_to "Activate", project_repository_status_path(@project, repository, status: RepositoryConstants::ACTIVE), method: :patch
              - if repository.status == RepositoryConstants::ACTIVE
                = link_to "Deactivate", project_repository_status_path(@project, repository, status: RepositoryConstants::INACTIVE), method: :patch

  .d-flex.justify-content-between.mt-5
    h3 Members
    .d-flex.align-items-center
    button.btn.btn-primary type="button" data-toggle="modal" data-target="#addNewMemberModal" Add new member


  .mt-4
    table.table.table-hover
      thead
        tr
          th.by-content #
          th Name
          th Role
          th
      tbody
        - @roles.each_with_index do |project_user_role, index|
          tr
            td.text-center = index + 1
            td = project_user_role.user.full_name
            td = project_user_role.role.humanize
            td = link_to "X", project_project_user_role_path(@project, project_user_role), method: :delete, data: { confirm: "Are you sure want to remove user from project?" }

#addNewMemberModal.modal.fade aria-hidden="true" aria-labelledby="addNewMemberModalLabel" role="dialog" tabindex="-1"
  .modal-dialog role="document"
    .modal-content
      .modal-header
        h5#addNewMemberModalLabel.modal-title Add new member to project
        button.close aria-label="Close" data-dismiss="modal" type="button"
          span aria-hidden="true" &times;
      .modal-body
        = simple_form_for @project.project_user_roles.build, url: project_project_user_roles_path(@project) do |form|
          = form.input :user_id, collection: User.where.not(id: @project.project_user_roles.map(&:user_id)).pluck(:full_name, :id)
          = form.input :role, selected: ProjectUserRoleConstants::REGULAR_USER
          = form.button :submit, "Add user", class: "btn btn-primary btn-block"
      .modal-footer
        button.btn.alert-dark data-dismiss="modal" type="button" Cancel
